tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=10)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
tree.cv
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
require(tree)
tree.model <- tree(Purchase~., data = OJ)
tree.model
summary(tree.model)
plot(tree.model)
text(tree.model)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
tree.model
plot(tree.model)
text(tree.model)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
cf
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
ts
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = OJ)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
tree.model <- tree(Purchase~., data = train.set)
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=10)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
#9.4
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=6)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
#9.4
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
#data sets
require(ISLR)
set.seed(123)
idx.train = sample.int(nrow(OJ),size = 800)
train.set = OJ[idx.train,]
test.set = OJ[-idx.train,]
#tree
require(tree)
tree.model <- tree(Purchase~., data = train.set)
summary(tree.model)
#c)
tree.model
#d)
plot(tree.model)
text(tree.model)
#e)
pred.class <- predict(tree.model,newdata = test.set,type="class")
cf = table(test.set$Purchase,pred.class)
addmargins(cf)
#f)
tree.cv = cv.tree(tree.model,FUN = prune.misclass,K=5)
opt.alpha = tree.cv$k[which.min(tree.cv$dev)]
opt.alpha
opt.size = tree.cv$size[which.min(tree.cv$dev)]
opt.size
opt.tree = prune.tree(tree.model,method = "misclass", k = opt.alpha)
plot(opt.tree)
text(opt.tree)
tree.cv
#g)
par(mfrow=c(1,1))
plot(tree.cv$size,tree.cv$dev)
grid()
#h)
#i)
par(mfrow=c(1,2))
prune.model <- prune.misclass(tree.model,k = opt.alpha)
plot(prune.model)
text(prune.model)
prune.model <- prune.misclass(tree.model,best = opt.size)
plot(prune.model)
text(prune.model)
summary(tree.model)
summary(prune.model)
pred.classnew <- predict(tree.model,newdata = test.set,type="class")
cfnew = table(test.set$Purchase,pred.class)
addmargins(cfnew)
pred.classnewprune <- predict(tree.model,newdata = test.set,type="class")
cfnewprune = table(test.set$Purchase,pred.class)
addmargins(cfnewprune)
pred.classnewprune <- predict(prune.model),newdata = test.set,type="class")
cfnewprune = table(test.set$Purchase,pred.class)
addmargins(cfnewprune)
pred.classnewprune <- predict(prune.model,newdata = test.set,type="class")
cfnewprune = table(test.set$Purchase,pred.class)
addmargins(cfnewprune)
pred.classnew <- predict(tree.model,newdata = test.set,type="class")
cfnew = table(test.set$Purchase,pred.class)
addmargins(cfnew)
48/270
pred.classnewprune <- predict(prune.model,newdata = test.set,type="class")
cfnewprune = table(test.set$Purchase,pred.class)
addmargins(cfnewprune)
summary(tree.model)
summary(prune.model)
summary(tree.model)
summary(prune.model)
summary(tree.model)
summary(prune.model)
cols.dont.want = c("name")
data2 <- Auto
data2 <- data2[, ! names(data2) %in% cols.dont.want, drop = F]
library(ISLR)
library(tree)
cols.dont.want = c("name")
data2 <- Auto
data2 <- data2[, ! names(data2) %in% cols.dont.want, drop = F]
reg.tree.model <- tree(mpg~.,data = data2)
plot(reg.tree.model)
text(reg.tree.model)
prune.reg.tree <- cv.tree(reg.tree.model,K=5)
opt.alpha.reg <- prune.reg.tree$k[which.min(prune.reg.tree$dev)]
getwd()
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
data <- read.table("genData\\data.txt",sep=",",head=TRUE)
name <- levels(data$Name)
hits <- c(1:length(name))
hitters.frame <- data.frame(name,hits)
for (element in name){
anztask <- data$Name == element
hitters.frame$hits[hitters.frame$name == element] <- sum(anztask)
}
jpeg('rplot.jpeg')
plt <- barplot(hitters.frame$hits,names.arg =hitters.frame$name)
invisible(dev.off())
#return stdout
hitters.frame
getwd()
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
getwd()
data <- read.table("genData\\data.txt",sep=",",head=TRUE)
data <- read.table("\genData\\data.txt",sep=",",head=TRUE)
data <- read.table("\\genData\\data.txt",sep=",",head=TRUE)
data <- read.table("genData\\data.txt",sep=",",head=TRUE)
data <- read.table(".\\genData\\data.txt",sep=",",head=TRUE)
data <- read.table("..\\genData\\data.txt",sep=",",head=TRUE)
dir()
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
getwd()
dir()
data <- read.table(".\\genData\\data.txt",sep=",",head=TRUE)
name <- levels(data$Name)
hits <- c(1:length(name))
hitters.frame <- data.frame(name,hits)
for (element in name){
anztask <- data$Name == element
hitters.frame$hits[hitters.frame$name == element] <- sum(anztask)
}
jpeg('rplot.jpeg')
plt <- barplot(hitters.frame$hits,names.arg =hitters.frame$name)
invisible(dev.off())
#return stdout
hitters.frame
getwd()
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
getwd()
dir()
data <- read.table(".\\genData\\data.txt",sep=",",head=TRUE)
data <- read.table(".\\genData\\urs.txt",sep=",",head=TRUE)
data <- read.table(".\\genData\\data.txt",sep=",",head=TRUE)
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
getwd()
dir()
data <- read.table(".\\genData\\data.txt",sep=",",head=TRUE)
name <- levels(data$Name)
hits <- c(1:length(name))
hitters.frame <- data.frame(name,hits)
for (element in name){
anztask <- data$Name == element
hitters.frame$hits[hitters.frame$name == element] <- sum(anztask)
}
jpeg('rplot.jpeg')
plt <- barplot(hitters.frame$hits,names.arg =hitters.frame$name)
invisible(dev.off())
#return stdout
hitters.frame
3+4
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
val = getwd()
write(val,file = "testdata.txt")
setwd("H:\\Naturwissenschaften\\Python\\DB_Project\\Python_Db")
val = getwd()
data = read.table("testdata.txt")
plot(data)
